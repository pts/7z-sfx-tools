#!/bin/sh --
#
# mklinux7zsfx: build statically-linked Linux i386 7z .sfx, 7zCon.sfx
# by pts@fazekas.hu at Sun Dec  8 19:20:27 CET 2013
#

set -ex

if ! test -f p7zip_9.20_src_all.tar.bz2; then
  if ! wget -O p7zip_9.20_src_all.tar.bz2.tmp \
      http://sourceforge.net/projects/p7zip/files/p7zip/9.20/p7zip_9.20_src_all.tar.bz2/download; then
    : Could not download p7zip_9.20_src_all.tar.bz2
    rm -f p7zip_9.20_src_all.tar.bz2.tmp
    exit 2
  fi
  mv -f p7zip_9.20_src_all.tar.bz2.tmp p7zip_9.20_src_all.tar.bz2
fi

CCPREFIX="$HOME/cross-compiler/bin/i686-"
test -x "${CCPREFIX}g++"
test -x "${CCPREFIX}gcc"

rm -rf 7zsfxbuild
mkdir 7zsfxbuild
(cd 7zsfxbuild && tar xjvf ../p7zip_9.20_src_all.tar.bz2)
# Patch for the -e flag to specify the archive filename.
# Use `7zCon.sfx -yeFOO.7z' to extract.
(cd 7zsfxbuild && patch -f -p0 <<'ENDPATCH'
--- p7zip_9.20/CPP/7zip/Bundles/SFXCon/Main.cpp.orig	2010-05-29 17:04:45.000000000 +0200
+++ p7zip_9.20/CPP/7zip/Bundles/SFXCon/Main.cpp	2013-12-22 17:22:24.155767258 +0100
@@ -28,30 +28,31 @@
 using namespace NWindows;
 using namespace NFile;
 using namespace NCommandLineParser;
 
 extern CStdOutStream *g_StdStream;
 
 static const char *kCopyrightString =
 "\n7-Zip SFX " MY_VERSION_COPYRIGHT_DATE "\n"
 "p7zip Version " P7ZIP_VERSION ;
 
-static const int kNumSwitches = 6;
+static const int kNumSwitches = 7;
 
 namespace NKey {
 enum Enum
 {
   kHelp1 = 0,
   kHelp2,
   kDisablePercents,
   kYes,
   kPassword,
+  kArchive,
   kOutputDir
 };
 
 }
 
 namespace NRecursedType {
 enum EEnum
 {
   kRecursed,
   kWildCardOnlyRecursed,
@@ -76,20 +77,21 @@
 static const char kSomeCludePostStringMinSize = 2; // at least <@|!><N>ame must be
 static const char kSomeCludeAfterRecursedPostStringMinSize = 2; // at least <@|!><N>ame must be
 */
 static const CSwitchForm kSwitchForms[kNumSwitches] =
   {
     { L"?",  NSwitchType::kSimple, false },
     { L"H",  NSwitchType::kSimple, false },
     { L"BD", NSwitchType::kSimple, false },
     { L"Y",  NSwitchType::kSimple, false },
     { L"P",  NSwitchType::kUnLimitedPostString, false, 1 },
+    { L"E",  NSwitchType::kUnLimitedPostString, false, 1 },
     { L"O",  NSwitchType::kUnLimitedPostString, false, 1 },
   };
 
 static const int kNumCommandForms = 3;
 
 namespace NCommandType {
 enum EEnum
 {
   kTest = 0,
   // kExtract,
@@ -121,20 +123,21 @@
 static const char *kHelpString =
     "\nUsage: 7zSFX [<command>] [<switches>...]\n"
     "\n"
     "<Commands>\n"
     "  l: List contents of archive\n"
     "  t: Test integrity of archive\n"
     "  x: eXtract files with full pathname (default)\n"
     "<Switches>\n"
     // "  -bd Disable percentage indicator\n"
     "  -o{Directory}: set Output directory\n"
+    "  -e{Archive}: archive to Extract (default is self, argv[0])\n"
     "  -p{Password}: set Password\n"
     "  -y: assume Yes on all queries\n";
 
 
 // ---------------------------
 // exception messages
 
 static const char *kUserErrorMessage  = "Incorrect command line"; // NExitCode::kUserError
 // static const char *kIncorrectListFile = "Incorrect wildcard in listfile";
 static const char *kIncorrectWildCardInCommandLine  = "Incorrect wildcard in command line";
@@ -265,21 +268,21 @@
   // After mySplitCommandLine
   g_StdOut << kCopyrightString << " (locale=" << my_getlocale() <<",Utf16=";
   if (global_use_utf16_conversion) g_StdOut << "on";
   else                             g_StdOut << "off";
   g_StdOut << ",HugeFiles=";
   if (sizeof(off_t) >= 8) g_StdOut << "on,";
   else                    g_StdOut << "off,";
   int nbcpu = NWindows::NSystem::GetNumberOfProcessors();
   if (nbcpu > 1) g_StdOut << nbcpu << " CPUs)\n";
   else           g_StdOut << nbcpu << " CPU)\n";
- 
+
   UString arcPath = commandStrings.Front();
 
   commandStrings.Delete(0);
 
   NCommandLineParser::CParser parser(kNumSwitches);
   try
   {
     parser.ParseStrings(kSwitchForms, commandStrings);
   }
   catch(...)
@@ -322,20 +325,24 @@
 
   // NExtractMode::EEnum extractMode;
   // bool isExtractGroupCommand = command.IsFromExtractGroup(extractMode);
 
   bool passwordEnabled = parser[NKey::kPassword].ThereIs;
 
   UString password;
   if(passwordEnabled)
     password = parser[NKey::kPassword].PostStrings[0];
 
+  if (parser[NKey::kArchive].ThereIs)
+  {
+    arcPath = parser[NKey::kArchive].PostStrings[0];
+  }
   if (!NFind::DoesFileExist(arcPath))
     throw kCantFindSFX;
   
   UString outputDir;
   if (parser[NKey::kOutputDir].ThereIs)
   {
     outputDir = parser[NKey::kOutputDir].PostStrings[0];
     NName::NormalizeDirPathPrefix(outputDir);
   }
ENDPATCH
)

cat >7zsfxbuild/p7zip_9.20/makefile.machine <<'END'
#
# makefile for Linux (x86, PPC, alpha ...)
#

OPTFLAGS=-Os

ALLFLAGS=${OPTFLAGS} -pipe -m32 -s \
    	-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE \
	-DNDEBUG -D_REENTRANT -DENV_UNIX \
	-D_7ZIP_LARGE_PAGES \
	$(LOCAL_FLAGS)

CCPREFIX=/SET_FROM_CMDLINE/
# Can't specify -fno-exceptions, the code uses exceptions.
CXX='$(CCPREFIX)g++' -static -fno-rtti -fno-stack-protector -ffunction-sections -fdata-sections -Wl,--gc-sections $(ALLFLAGS) -DENV_HAVE_GCCVISIBILITYPATCH -fvisibility=hidden -fvisibility-inlines-hidden
CC ='$(CCPREFIX)gcc' -static -fno-stack-protector -ffunction-sections -fdata-sections -Wl,--gc-sections $(ALLFLAGS)
CC_SHARED=-fPIC
LINK_SHARED=-fPIC -shared
ASM=nasm -f elf

PRE_COMPILED_HEADER=StdAfx.h.gch

LOCAL_LIBS=-lpthread
LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl

CPU=x86
OBJ_CRC32=$(OBJ_CRC32_x86)
END
make -C 7zsfxbuild/p7zip_9.20 sfx CCPREFIX="$CCPREFIX"
cp -a 7zsfxbuild/p7zip_9.20/bin/7zCon.sfx 7zsfxbuild/
UPX=upx
type -p upx.pts && UPX=upx.pts
upx.pts --ultra-brute 7zsfxbuild/7zCon.sfx
ls -l 7zsfxbuild/7zCon.sfx

: mklinux7zsfx OK.
